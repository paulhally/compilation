
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 07 14:48:51 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 07 14:48:51 CET 2013
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\005\013" +
    "\000\002\004\007\000\002\010\004\000\002\010\002\000" +
    "\002\012\004\000\002\012\002\000\002\013\005\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\013\007\000\002\013\007\000\002\006\005" +
    "\000\002\006\003\000\002\007\004\000\002\007\002\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\015\011\000\002\015\015\000\002\016" +
    "\021\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\017\011\000\002\023\005\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\006\000\002\022" +
    "\004\000\002\022\003\000\002\022\006\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\021\005\000\002\021" +
    "\005\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\020\003\012\026\ufffd\037\004\040\014\041" +
    "\005\042\010\044\015\001\002\000\004\036\uffca\001\002" +
    "\000\004\036\uffc8\001\002\000\016\026\ufffd\037\004\040" +
    "\014\041\005\042\010\044\015\001\002\000\004\002\220" +
    "\001\002\000\004\036\uffc6\001\002\000\004\036\203\001" +
    "\002\000\004\002\uffff\001\002\000\004\026\017\001\002" +
    "\000\004\036\uffc9\001\002\000\004\036\uffc7\001\002\000" +
    "\004\002\000\001\002\000\004\035\020\001\002\000\030" +
    "\030\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037\021\040" +
    "\031\041\022\042\025\043\024\044\030\001\002\000\004" +
    "\036\uffca\001\002\000\004\036\uffc8\001\002\000\030\030" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037\021\040\031" +
    "\041\022\042\025\043\024\044\030\001\002\000\004\036" +
    "\166\001\002\000\004\036\uffc6\001\002\000\004\036\160" +
    "\001\002\000\014\030\050\032\044\033\043\034\ufff9\036" +
    "\051\001\002\000\004\036\uffc7\001\002\000\004\036\uffc9" +
    "\001\002\000\004\012\033\001\002\000\004\047\034\001" +
    "\002\000\004\025\035\001\002\000\030\030\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\001\002\000\004\012\037\001\002" +
    "\000\004\051\040\001\002\000\004\025\041\001\002\000" +
    "\030\030\ufff1\032\ufff1\033\ufff1\034\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\001\002\000" +
    "\014\030\050\032\044\033\043\034\ufff9\036\051\001\002" +
    "\000\004\016\151\001\002\000\004\016\123\001\002\000" +
    "\014\030\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8\001\002" +
    "\000\014\030\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\001" +
    "\002\000\014\030\uffea\032\uffea\033\uffea\034\uffea\036\uffea" +
    "\001\002\000\004\016\066\001\002\000\004\012\055\001" +
    "\002\000\004\034\054\001\002\000\014\030\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\036\uffe9\001\002\000\004\002\ufffb\001" +
    "\002\000\012\045\056\046\060\050\057\051\061\001\002" +
    "\000\004\025\065\001\002\000\004\025\064\001\002\000" +
    "\004\025\063\001\002\000\004\025\062\001\002\000\014" +
    "\030\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\001\002\000" +
    "\014\030\uffe4\032\uffe4\033\uffe4\034\uffe4\036\uffe4\001\002" +
    "\000\014\030\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2\001" +
    "\002\000\014\030\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3" +
    "\001\002\000\006\014\072\036\070\001\002\000\010\004" +
    "\uffde\005\uffde\017\uffde\001\002\000\022\004\uffd7\005\uffd7" +
    "\006\110\007\113\010\115\011\112\012\111\017\uffd7\001" +
    "\002\000\010\004\076\005\074\017\077\001\002\000\004" +
    "\036\073\001\002\000\010\004\uffd8\005\uffd8\017\uffd8\001" +
    "\002\000\006\014\uffdd\036\uffdd\001\002\000\006\014\072" +
    "\036\070\001\002\000\006\014\uffdc\036\uffdc\001\002\000" +
    "\004\035\100\001\002\000\014\030\050\032\044\033\043" +
    "\034\ufff9\036\051\001\002\000\004\034\102\001\002\000" +
    "\016\030\uffe7\031\103\032\uffe7\033\uffe7\034\uffe7\036\uffe7" +
    "\001\002\000\004\035\104\001\002\000\014\030\050\032" +
    "\044\033\043\034\ufff9\036\051\001\002\000\004\034\106" +
    "\001\002\000\014\030\uffe6\032\uffe6\033\uffe6\034\uffe6\036" +
    "\uffe6\001\002\000\010\004\076\005\074\017\uffdf\001\002" +
    "\000\006\036\uffd5\045\uffd5\001\002\000\004\012\120\001" +
    "\002\000\006\036\uffd2\045\uffd2\001\002\000\006\036\uffd4" +
    "\045\uffd4\001\002\000\006\036\116\045\117\001\002\000" +
    "\006\036\uffd3\045\uffd3\001\002\000\010\004\uffdb\005\uffdb" +
    "\017\uffdb\001\002\000\010\004\uffda\005\uffda\017\uffda\001" +
    "\002\000\012\036\uffd1\045\uffd1\046\122\050\121\001\002" +
    "\000\010\004\uffd6\005\uffd6\017\uffd6\001\002\000\010\004" +
    "\uffd9\005\uffd9\017\uffd9\001\002\000\004\036\124\001\002" +
    "\000\004\012\125\001\002\000\004\045\126\001\002\000" +
    "\004\025\127\001\002\000\004\036\130\001\002\000\012" +
    "\006\143\007\145\010\146\011\144\001\002\000\004\025" +
    "\132\001\002\000\004\036\133\001\002\000\004\020\134" +
    "\001\002\000\004\020\135\001\002\000\004\017\136\001" +
    "\002\000\004\035\137\001\002\000\014\030\050\032\044" +
    "\033\043\034\ufff9\036\051\001\002\000\004\034\141\001" +
    "\002\000\014\030\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5" +
    "\001\002\000\006\036\147\045\150\001\002\000\006\036" +
    "\uffd0\045\uffd0\001\002\000\006\036\uffcd\045\uffcd\001\002" +
    "\000\006\036\uffcf\045\uffcf\001\002\000\006\036\uffce\045" +
    "\uffce\001\002\000\004\025\uffcc\001\002\000\004\025\uffcb" +
    "\001\002\000\006\014\072\036\070\001\002\000\010\004" +
    "\076\005\074\017\153\001\002\000\004\035\154\001\002" +
    "\000\014\030\050\032\044\033\043\034\ufff9\036\051\001" +
    "\002\000\004\034\156\001\002\000\014\030\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\036\uffe0\001\002\000\004\034\ufffa\001" +
    "\002\000\004\025\161\001\002\000\030\030\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\001\002\000\004\012\163\001\002" +
    "\000\004\045\164\001\002\000\004\025\165\001\002\000" +
    "\030\030\ufff3\032\ufff3\033\ufff3\034\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002\000" +
    "\004\012\167\001\002\000\004\046\170\001\002\000\004" +
    "\025\171\001\002\000\030\030\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\001\002\000\014\030\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\036\ufff8\001\002\000\004\012\174\001\002\000\004" +
    "\050\175\001\002\000\004\025\176\001\002\000\030\030" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\001\002\000\004\012" +
    "\200\001\002\000\004\045\201\001\002\000\004\025\202" +
    "\001\002\000\030\030\ufff5\032\ufff5\033\ufff5\034\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\001\002\000\004\016\204\001\002\000\020\017\uffec\027" +
    "\uffec\037\004\040\014\041\005\042\010\044\015\001\002" +
    "\000\004\017\213\001\002\000\006\017\uffee\027\211\001" +
    "\002\000\004\036\210\001\002\000\006\017\uffed\027\uffed" +
    "\001\002\000\020\017\uffec\027\uffec\037\004\040\014\041" +
    "\005\042\010\044\015\001\002\000\004\017\uffef\001\002" +
    "\000\004\035\214\001\002\000\030\030\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\036\ufff7\037\021\040\031\041\022\042\025" +
    "\043\024\044\030\001\002\000\014\030\050\032\044\033" +
    "\043\034\ufff9\036\051\001\002\000\004\034\217\001\002" +
    "\000\016\026\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\044" +
    "\ufffc\001\002\000\004\002\001\001\002\000\004\026\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\012\002\006\003\012\005\005\014\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\220" +
    "\005\005\014\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\026\013\022\014\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\171\013\022\014\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\051\011\041\015" +
    "\045\016\046\017\044\020\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\156\011\041\015\045\016\046\017\044\020\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\066\023\070\001\001\000\002\001\001\000\004\025" +
    "\113\001\001\000\004\024\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\066\023" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\100\011\041\015\045\016\046\017\044\020\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\104\011\041\015\045\016\046\017\044\020" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\130\001\001\000\004\026\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\137" +
    "\011\041\015\045\016\046\017\044\020\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\066" +
    "\023\151\001\001\000\004\024\074\001\001\000\002\001" +
    "\001\000\016\010\154\011\041\015\045\016\046\017\044" +
    "\020\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\204\007\205\014\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\211\007\205\014\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\214\013\022\014\025\001\001\000\016\010\215\011\041" +
    "\015\045\016\046\017\044\020\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol cur_token){

		report_error("\n Erreur de syntaxe! \n Ligne : "+ cur_token.left + "\n Colonne : " + cur_token.right+"\n\n" ,null);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
		report_fatal_error(" Analyse interrompue (erreur de syntaxe)\n ", null);

	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= UNSIGNED 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= INT 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // testFOR ::= ID comparateurFOR NUMBER 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFOR",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // testFOR ::= ID comparateurFOR ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFOR",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comparateurFOR ::= PGS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comparateurFOR ::= PPS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comparateurFOR ::= PGE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparateurFOR ::= PPE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparateur ::= EQ EQ 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparateur ::= PGS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparateur ::= PPS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparateur ::= PGE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparateur ::= PPE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // testIF ::= ID EQ EQ BOOLEEN 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // testIF ::= ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // testIF ::= NON ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // testIF ::= ID EQ EQ CHAINE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // testIF ::= ID comparateur NUMBER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // testIF ::= ID comparateur ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operande ::= OR 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("operande",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operande ::= AND 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("operande",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // liste_testIF ::= testIF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIF",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // liste_testIF ::= liste_testIF operande liste_testIF 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIF",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instructionWHILE ::= WHILE LPAR liste_testIF RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionWHILE",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instructionAFF ::= ID EQ CAR SEMIC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instructionAFF ::= ID EQ BOOLEEN SEMIC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instructionAFF ::= ID EQ NUMBER SEMIC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instructionAFF ::= ID EQ CHAINE SEMIC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instructionFOR ::= FOR LPAR ID EQ NUMBER SEMIC testFOR SEMIC ID PLUS PLUS RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionFOR",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-14)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instructionIF ::= IF LPAR liste_testIF RPAR LACC liste_instruction RACC ELSE LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIF",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instructionIF ::= IF LPAR liste_testIF RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIF",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruction ::= instructionWHILE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= instructionAFF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= instructionFOR 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= instructionIF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametre ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("parametre",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametre ::= type ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("parametre",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // liste_parametre ::= parametre 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_parametre",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // liste_parametre ::= parametre VIRGULE liste_parametre 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_parametre",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= STRING ID EQ CHAINE SEMIC 
            {
              Object RESULT =null;
		 RESULT = new Type(EnumType.STRING); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= CHAR ID EQ CAR SEMIC 
            {
              Object RESULT =null;
		 RESULT = new Type(EnumType.CHARACTER); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= BOOL ID EQ BOOLEEN SEMIC 
            {
              Object RESULT =null;
		 RESULT = new Type(EnumType.BOOLEAN); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= UNSIGNED ID EQ NUMBER SEMIC 
            {
              Object RESULT =null;
		 RESULT = new Type(EnumType.UNSIGNED); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= FLOAT ID EQ FLOTTANT SEMIC 
            {
              Object RESULT =null;
		 RESULT = new Type(EnumType.FLOAT); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= INT ID EQ NUMBER SEMIC 
            {
              Object RESULT =null;
		 RESULT = new Type(EnumType.INTEGER); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= type ID SEMIC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // liste_declaration ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_declaration",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // liste_declaration ::= declaration liste_declaration 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_declaration",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // liste_instruction ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_instruction",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // liste_instruction ::= instruction liste_instruction 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_instruction",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programme ::= MAIN LACC liste_declaration liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("programme",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fonction ::= type ID LPAR liste_parametre RPAR LACC liste_declaration liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("fonction",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // liste_fonction ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_fonction",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // liste_fonction ::= fonction liste_fonction 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_fonction",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // langage ::= error 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("langage",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // langage ::= liste_fonction programme 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("langage",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= langage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

