// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;
import java.lang.Number;

action code{:
	Langage lang=new Langage();
	Fonction fonction=new Fonction();
	Programme prog=new Programme();
	boolean instructionG=false;
	boolean instructionS=false;
	boolean instructionS2=false;
:}

parser code {:
	
	
	public void syntax_error(Symbol cur_token){

		report_error("\n Erreur de syntaxe! \n Ligne : "+ cur_token.left + "\n Colonne : " + cur_token.right+"\n\n" ,null);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
		report_fatal_error(" Analyse interrompue (erreur de syntaxe)\n ", null);

	}
:}




terminal OR, AND, PPE, PGE, PPS, PGS, EQ, IMP, NON, EQUI;
terminal LPAR, RPAR, PLUS, MINUS, TIMES, DIVIDE, MINUS_U, SEMIC;
terminal MAIN, VIRGULE, IF, ELSE, FOR, WHILE, RACC, LACC;
terminal INT, FLOAT, BOOL, UNSIGNED, STRING, CHAR;
terminal RETURN;
terminal String ID;
terminal Integer NUMBER;
terminal Float FLOTTANT; 
terminal Boolean BOOLEEN;
terminal String CAR;
terminal String CHAINE;

non terminal Type type;
non terminal Langage langage;
non terminal LFonction liste_fonction;
non terminal Programme programme;
non terminal Fonction fonction;
non terminal listefonction_parametre;
non terminal Parametre parametre;
non terminal listefonction_instruction;
non terminal instruction;
non terminal instructionfct;
non terminal listefonction_declaration;
non terminal instructionIFfct;
non terminal debut_instruction_if;
non terminal instructionFORfct;
non terminal debut_instruction_for;
non terminal  instructionWHILEfct;
non terminal debut_instruction_while;
non terminal  instructionAFFfct;
non terminal instructionAppel;
non terminal  testFORfct;
non terminal  testIFfct;
non terminal  liste_testIFfct;
non terminal liste_declaration;
non terminal liste_instruction;
non terminal Declaration declaration;
non terminal instructionIF;
non terminal instructionFOR;
non terminal  instructionWHILE;
non terminal  instructionAFF;
non terminal  testFOR;
non terminal  testIF;
non terminal  liste_testIF;
non terminal  operande;
non terminal  comparateur;
non terminal comparateurFOR;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE,PPS,PPE,PPE,PGS,EQ,IMP,OR,AND,EQUI;
precedence left INT, FLOAT, BOOL, UNSIGNED, STRING, CHAR;

start with langage;


langage ::= liste_fonction:lf programme:p {: RESULT=lang; :}
		|error
		;

liste_fonction ::= fonction:f liste_fonction:lf 
		| 
		;
		
fonction ::= type:t ID:id LPAR listefonction_parametre RPAR LACC listefonction_declaration listefonction_instruction RETURN ID SEMIC RACC 
			{: 
				
				fonction.setType(t);
				fonction.setNom(id);
		
				lang.ajouterFonction(fonction); 
				fonction.clearListe();
		
			:}
			;


listefonction_instruction ::= instructionfct listefonction_instruction  
		{: 
							if(instructionS2){
								System.out.println("fin instruction secondaire 2");
								instructionS2=false;
							}
							else{
								if(instructionS){
									System.out.println("fin instruction secondaire");
									instructionS=false;
								}
								else if(instructionG){
									System.out.println("fin instruction globale");
									instructionG=false;
								}
							}
					
					 :}
		|
		;
		
listefonction_declaration ::= declaration:d listefonction_declaration {:  fonction.ajouterDeclaration(d); :}
		| 
		;
		
listefonction_parametre ::= parametre:par VIRGULE listefonction_parametre {: fonction.ajouterParametre(par); :}
		| parametre:par {: fonction.ajouterParametre(par); :}
		;

parametre ::= type:t ID:i {: RESULT = new Parametre(t,i); :}
			| 
			;
instructionfct ::= instructionIFfct 
		| instructionFORfct 
		| instructionAFFfct 
		| instructionWHILEfct 
		;
		
instructionIFfct ::= debut_instruction_if  listefonction_instruction RACC 
				|debut_instruction_if listefonction_instruction RACC ELSE LACC listefonction_instruction RACC
				;

debut_instruction_if ::= IF LPAR liste_testIFfct RPAR LACC 
						{: 
							if(!instructionG){
								System.out.println("debut instruction glob");
								fonction.ajouterInstruction(new Instruction("if"));
								instructionG=true;
							}
							else{
								if(!instructionS){
									System.out.println("debut instruction sec");
									instructionS=true;
								}
								else{
									System.out.println("debut instruction sec 2");
									instructionS2=true;
								
								}
								
							}
						 :};

liste_testIFfct ::= liste_testIFfct operande:o liste_testIFfct
		| testIFfct
		; 



testIFfct ::= ID comparateur:c ID
		|ID comparateur:c NUMBER
		|ID EQ EQ CHAINE
		|NON ID
		|ID
		|ID EQ EQ BOOLEEN
		;
		
instructionFORfct ::= debut_instruction_for listefonction_instruction RACC;

debut_instruction_for ::= FOR LPAR ID EQ NUMBER SEMIC testFORfct SEMIC ID PLUS PLUS RPAR LACC
						{: 
						
							if(!instructionG){
								System.out.println("debut instruction glob");
								fonction.ajouterInstruction(new Instruction("for"));
								instructionG=true;
							}
							else{
								if(!instructionS){
									System.out.println("debut instruction sec");
									instructionS=true;
								}
								else{
									System.out.println("debut instruction sec 2");
									instructionS2=true;
								
								}
								
							}
						 :};
						 
instructionAFFfct ::= ID:id EQ ID:id2 SEMIC {: fonction.affectation2(id,id2);  :} 
		| ID:id EQ NUMBER:v SEMIC{:  fonction.affectation(id,String.valueOf(v)); :} 
		| ID:id EQ BOOLEEN:v SEMIC {:  fonction.affectation(id,String.valueOf(v)); :} 
		| ID:id EQ CAR:v SEMIC {:  fonction.affectation(id,String.valueOf(v)); :} 
		| ID:id EQ FLOTTANT:v SEMIC {:  fonction.affectation(id,String.valueOf(v)); :} 
		;
		
instructionWHILEfct ::= debut_instruction_while listefonction_instruction RACC;

debut_instruction_while::= WHILE LPAR liste_testIFfct RPAR LACC
			{: 
							
							if(!instructionG){
								System.out.println("debut instruction glob");
								fonction.ajouterInstruction(new Instruction("while"));
								instructionG=true;
							}
							else{
								if(!instructionS){
									System.out.println("debut instruction sec");
									instructionS=true;
								}
								else{
									System.out.println("debut instruction sec 2");
									instructionS2=true;
								
								}
								
							}
						 :};


		


testFORfct ::= ID comparateurFOR ID 
		| ID comparateurFOR NUMBER
		;

programme ::= MAIN LACC liste_declaration liste_instruction RACC 
			{: lang.setP(prog); :};
		
liste_declaration ::= declaration:d liste_declaration {:  prog.ajouterDeclaration(d); :}
		| 
		;

liste_instruction ::= instruction liste_instruction 
		| 
		;
		
declaration ::= type:t ID:id SEMIC {:  RESULT = new Declaration(t,id); :} ;



instruction ::=  instructionAppel 
		|instructionIF
		| instructionFOR
		| instructionAFF 
		| instructionWHILE
		;
		
instructionAppel ::= ID:i EQ ID:i2 LPAR ID:i3 RPAR SEMIC
			{:  :}
			;
	
instructionIF ::= IF LPAR liste_testIF RPAR LACC liste_instruction RACC
				|IF LPAR liste_testIF RPAR LACC liste_instruction RACC ELSE LACC liste_instruction RACC
				;

instructionFOR ::= FOR LPAR ID EQ NUMBER SEMIC testFOR SEMIC ID PLUS PLUS RPAR LACC liste_instruction RACC;

instructionAFF ::= ID:id EQ NUMBER:v SEMIC{:  prog.affectation(id,String.valueOf(v)); :}
		| ID:id EQ BOOLEEN:v SEMIC {:  prog.affectation(id,String.valueOf(v)); :}
		| ID:id EQ CAR:v SEMIC {:  prog.affectation(id,String.valueOf(v)); :}
		| ID:id EQ FLOTTANT:v SEMIC {:  prog.affectation(id,String.valueOf(v)); :}
		;
		
instructionWHILE ::= WHILE LPAR liste_testIF RPAR LACC liste_instruction RACC;

liste_testIF ::= liste_testIF operande:o liste_testIF
		| testIF
		; 



testIF ::= ID comparateur:c ID
		|ID comparateur:c NUMBER
		|ID EQ EQ CHAINE
		|NON ID
		|ID
		|ID EQ EQ BOOLEEN
		;
		


testFOR ::= ID comparateurFOR ID 
		| ID comparateurFOR NUMBER
		;
		
type ::= INT {: RESULT=new Type(EnumType.INTEGER); :}
		| FLOAT {: RESULT=new Type(EnumType.FLOAT); :}
		| BOOL {: RESULT=new Type(EnumType.BOOLEAN); :}
		| CHAR {: RESULT=new Type(EnumType.CHARACTER); :}
		|UNSIGNED {: RESULT=new Type(EnumType.UNSIGNED); :}
		;
		
operande ::= AND 
		| OR
		;
		
comparateur ::= PPE| PGE| PPS| PGS| EQ EQ;

comparateurFOR ::= PPE
				| PGE
				| PPS
				| PGS
				;