
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 08 20:15:50 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 08 20:15:50 CET 2013
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\016" +
    "\000\002\011\004\000\002\011\002\000\002\014\004\000" +
    "\002\014\002\000\002\007\005\000\002\007\003\000\002" +
    "\010\004\000\002\010\002\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\015\011" +
    "\000\002\015\015\000\002\024\005\000\002\024\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\006\000\002" +
    "\023\004\000\002\023\003\000\002\023\006\000\002\016" +
    "\021\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\017\011\000" +
    "\002\022\005\000\002\022\005\000\002\005\007\000\002" +
    "\025\004\000\002\025\002\000\002\026\004\000\002\026" +
    "\002\000\002\027\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\021\011\000\002\030\011\000\002\030\015\000\002" +
    "\031\021\000\002\033\006\000\002\033\006\000\002\033" +
    "\006\000\002\033\006\000\002\032\011\000\002\036\005" +
    "\000\002\036\003\000\002\035\005\000\002\035\005\000" +
    "\002\035\006\000\002\035\004\000\002\035\003\000\002" +
    "\035\006\000\002\034\005\000\002\034\005\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\037\003\000\002\037\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\004\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\020\003\012\026\ufffd\036\004\037\014\040" +
    "\005\041\010\043\015\001\002\000\004\045\uffbe\001\002" +
    "\000\004\045\uffbc\001\002\000\016\026\ufffd\036\004\037" +
    "\014\040\005\041\010\043\015\001\002\000\004\002\301" +
    "\001\002\000\004\045\uffba\001\002\000\004\045\153\001" +
    "\002\000\004\002\uffff\001\002\000\004\026\017\001\002" +
    "\000\004\045\uffbd\001\002\000\004\045\uffbb\001\002\000" +
    "\004\002\000\001\002\000\004\035\020\001\002\000\026" +
    "\030\uffda\032\uffda\033\uffda\034\uffda\036\004\037\014\040" +
    "\005\041\010\043\015\045\uffda\001\002\000\004\045\151" +
    "\001\002\000\014\030\033\032\027\033\026\034\uffd8\045" +
    "\034\001\002\000\026\030\uffda\032\uffda\033\uffda\034\uffda" +
    "\036\004\037\014\040\005\041\010\043\015\045\uffda\001" +
    "\002\000\014\030\uffdb\032\uffdb\033\uffdb\034\uffdb\045\uffdb" +
    "\001\002\000\014\030\033\032\027\033\026\034\uffd8\045" +
    "\034\001\002\000\004\016\142\001\002\000\004\016\114" +
    "\001\002\000\014\030\uffd2\032\uffd2\033\uffd2\034\uffd2\045" +
    "\uffd2\001\002\000\014\030\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\045\uffd5\001\002\000\014\030\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\045\uffd4\001\002\000\004\016\057\001\002\000\004" +
    "\012\041\001\002\000\004\034\040\001\002\000\014\030" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\045\uffd6\001\002\000\014" +
    "\030\uffd3\032\uffd3\033\uffd3\034\uffd3\045\uffd3\001\002\000" +
    "\004\002\uffdc\001\002\000\014\045\042\046\043\047\045" +
    "\050\044\051\046\001\002\000\004\016\053\001\002\000" +
    "\004\025\052\001\002\000\004\025\051\001\002\000\004" +
    "\025\050\001\002\000\004\025\047\001\002\000\014\030" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\045\uffcb\001\002\000\014" +
    "\030\uffca\032\uffca\033\uffca\034\uffca\045\uffca\001\002\000" +
    "\014\030\uffcc\032\uffcc\033\uffcc\034\uffcc\045\uffcc\001\002" +
    "\000\014\030\uffcd\032\uffcd\033\uffcd\034\uffcd\045\uffcd\001" +
    "\002\000\004\045\054\001\002\000\004\017\055\001\002" +
    "\000\004\025\056\001\002\000\014\030\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\045\uffd1\001\002\000\006\014\063\045\061" +
    "\001\002\000\010\004\uffc7\005\uffc7\017\uffc7\001\002\000" +
    "\022\004\uffc2\005\uffc2\006\102\007\104\010\106\011\103" +
    "\012\101\017\uffc2\001\002\000\010\004\070\005\065\017" +
    "\067\001\002\000\004\045\064\001\002\000\010\004\uffc3" +
    "\005\uffc3\017\uffc3\001\002\000\006\014\uffb9\045\uffb9\001" +
    "\002\000\006\014\063\045\061\001\002\000\004\035\071" +
    "\001\002\000\006\014\uffb8\045\uffb8\001\002\000\014\030" +
    "\033\032\027\033\026\034\uffd8\045\034\001\002\000\004" +
    "\034\073\001\002\000\016\030\uffd0\031\074\032\uffd0\033" +
    "\uffd0\034\uffd0\045\uffd0\001\002\000\004\035\075\001\002" +
    "\000\014\030\033\032\027\033\026\034\uffd8\045\034\001" +
    "\002\000\004\034\077\001\002\000\014\030\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\045\uffcf\001\002\000\010\004\070\005" +
    "\065\017\uffc8\001\002\000\004\012\111\001\002\000\006" +
    "\045\uffb7\046\uffb7\001\002\000\006\045\uffb4\046\uffb4\001" +
    "\002\000\006\045\uffb6\046\uffb6\001\002\000\006\045\107" +
    "\046\110\001\002\000\006\045\uffb5\046\uffb5\001\002\000" +
    "\010\004\uffc6\005\uffc6\017\uffc6\001\002\000\010\004\uffc5" +
    "\005\uffc5\017\uffc5\001\002\000\012\045\uffb3\046\uffb3\050" +
    "\112\052\113\001\002\000\010\004\uffc1\005\uffc1\017\uffc1" +
    "\001\002\000\010\004\uffc4\005\uffc4\017\uffc4\001\002\000" +
    "\004\045\115\001\002\000\004\012\116\001\002\000\004" +
    "\046\117\001\002\000\004\025\120\001\002\000\004\045" +
    "\121\001\002\000\012\006\134\007\136\010\137\011\135" +
    "\001\002\000\004\025\123\001\002\000\004\045\124\001" +
    "\002\000\004\020\125\001\002\000\004\020\126\001\002" +
    "\000\004\017\127\001\002\000\004\035\130\001\002\000" +
    "\014\030\033\032\027\033\026\034\uffd8\045\034\001\002" +
    "\000\004\034\132\001\002\000\014\030\uffce\032\uffce\033" +
    "\uffce\034\uffce\045\uffce\001\002\000\006\045\140\046\141" +
    "\001\002\000\006\045\uffb2\046\uffb2\001\002\000\006\045" +
    "\uffaf\046\uffaf\001\002\000\006\045\uffb1\046\uffb1\001\002" +
    "\000\006\045\uffb0\046\uffb0\001\002\000\004\025\uffc0\001" +
    "\002\000\004\025\uffbf\001\002\000\006\014\063\045\061" +
    "\001\002\000\010\004\070\005\065\017\144\001\002\000" +
    "\004\035\145\001\002\000\014\030\033\032\027\033\026" +
    "\034\uffd8\045\034\001\002\000\004\034\147\001\002\000" +
    "\014\030\uffc9\032\uffc9\033\uffc9\034\uffc9\045\uffc9\001\002" +
    "\000\004\034\uffd9\001\002\000\004\025\152\001\002\000" +
    "\030\030\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7\001\002\000" +
    "\004\016\154\001\002\000\020\017\ufff4\027\ufff4\036\004" +
    "\037\014\040\005\041\010\043\015\001\002\000\004\045" +
    "\300\001\002\000\006\017\ufff6\027\276\001\002\000\004" +
    "\017\160\001\002\000\004\035\161\001\002\000\026\030" +
    "\ufff8\032\ufff8\033\ufff8\036\004\037\014\040\005\041\010" +
    "\043\015\044\ufff8\045\ufff8\001\002\000\014\030\172\032" +
    "\171\033\166\044\ufffa\045\174\001\002\000\026\030\ufff8" +
    "\032\ufff8\033\ufff8\036\004\037\014\040\005\041\010\043" +
    "\015\044\ufff8\045\ufff8\001\002\000\014\030\ufff9\032\ufff9" +
    "\033\ufff9\044\ufff9\045\ufff9\001\002\000\004\044\272\001" +
    "\002\000\004\016\264\001\002\000\016\030\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\044\ufff1\045\ufff1\001\002\000\016\030" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\044\ufff3\045\ufff3\001\002" +
    "\000\004\016\242\001\002\000\004\016\213\001\002\000" +
    "\016\030\ufff0\032\ufff0\033\ufff0\034\ufff0\044\ufff0\045\ufff0" +
    "\001\002\000\004\012\200\001\002\000\016\030\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\044\ufff2\045\ufff2\001\002\000\016" +
    "\030\172\032\171\033\166\034\ufffa\044\ufffa\045\174\001" +
    "\002\000\006\034\ufffb\044\ufffb\001\002\000\014\045\201" +
    "\046\202\047\204\050\203\051\205\001\002\000\004\025" +
    "\212\001\002\000\004\025\211\001\002\000\004\025\210" +
    "\001\002\000\004\025\207\001\002\000\004\025\206\001" +
    "\002\000\016\030\uffe1\032\uffe1\033\uffe1\034\uffe1\044\uffe1" +
    "\045\uffe1\001\002\000\016\030\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\044\uffe0\045\uffe0\001\002\000\016\030\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\044\uffe2\045\uffe2\001\002\000\016\030" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\044\uffe3\045\uffe3\001\002" +
    "\000\016\030\uffe4\032\uffe4\033\uffe4\034\uffe4\044\uffe4\045" +
    "\uffe4\001\002\000\006\014\217\045\214\001\002\000\022" +
    "\004\uffe7\005\uffe7\006\102\007\104\010\106\011\103\012" +
    "\233\017\uffe7\001\002\000\010\004\070\005\065\017\222" +
    "\001\002\000\010\004\uffec\005\uffec\017\uffec\001\002\000" +
    "\004\045\220\001\002\000\010\004\uffe8\005\uffe8\017\uffe8" +
    "\001\002\000\006\014\217\045\214\001\002\000\004\035" +
    "\223\001\002\000\014\030\172\032\171\033\166\034\ufffa" +
    "\045\174\001\002\000\004\034\225\001\002\000\020\030" +
    "\uffef\031\226\032\uffef\033\uffef\034\uffef\044\uffef\045\uffef" +
    "\001\002\000\004\035\227\001\002\000\014\030\172\032" +
    "\171\033\166\034\ufffa\045\174\001\002\000\004\034\231" +
    "\001\002\000\016\030\uffee\032\uffee\033\uffee\034\uffee\044" +
    "\uffee\045\uffee\001\002\000\010\004\070\005\065\017\uffed" +
    "\001\002\000\004\012\237\001\002\000\006\045\235\046" +
    "\236\001\002\000\010\004\uffeb\005\uffeb\017\uffeb\001\002" +
    "\000\010\004\uffea\005\uffea\017\uffea\001\002\000\012\045" +
    "\uffb3\046\uffb3\050\240\052\241\001\002\000\010\004\uffe6" +
    "\005\uffe6\017\uffe6\001\002\000\010\004\uffe9\005\uffe9\017" +
    "\uffe9\001\002\000\004\045\243\001\002\000\004\012\244" +
    "\001\002\000\004\046\245\001\002\000\004\025\246\001" +
    "\002\000\004\045\247\001\002\000\012\006\134\007\136" +
    "\010\137\011\135\001\002\000\004\025\251\001\002\000" +
    "\004\045\252\001\002\000\004\020\253\001\002\000\004" +
    "\020\254\001\002\000\004\017\255\001\002\000\004\035" +
    "\256\001\002\000\014\030\172\032\171\033\166\034\ufffa" +
    "\045\174\001\002\000\004\034\260\001\002\000\016\030" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\044\uffe5\045\uffe5\001\002" +
    "\000\006\045\262\046\263\001\002\000\004\025\uffde\001" +
    "\002\000\004\025\uffdd\001\002\000\006\014\217\045\214" +
    "\001\002\000\010\004\070\005\065\017\266\001\002\000" +
    "\004\035\267\001\002\000\014\030\172\032\171\033\166" +
    "\034\ufffa\045\174\001\002\000\004\034\271\001\002\000" +
    "\016\030\uffdf\032\uffdf\033\uffdf\034\uffdf\044\uffdf\045\uffdf" +
    "\001\002\000\004\045\273\001\002\000\004\025\274\001" +
    "\002\000\004\034\275\001\002\000\016\026\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\043\ufffc\001\002\000\020\017" +
    "\ufff4\027\ufff4\036\004\037\014\040\005\041\010\043\015" +
    "\001\002\000\004\017\ufff7\001\002\000\006\017\ufff5\027" +
    "\ufff5\001\002\000\004\002\001\001\002\000\004\026\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\012\002\010\003\006\004\012\006\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\010" +
    "\004\301\006\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\020\025\021\027\022" +
    "\001\001\000\002\001\001\000\020\012\024\021\035\026" +
    "\034\030\030\031\031\032\027\033\036\001\001\000\010" +
    "\002\020\025\023\027\022\001\001\000\002\001\001\000" +
    "\020\012\024\021\035\026\147\030\030\031\031\032\027" +
    "\033\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\057\036\061\001\001\000\002\001\001\000" +
    "\004\040\104\001\001\000\004\037\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\057\036\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\024\021\035\026\071\030\030\031\031\032" +
    "\027\033\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\024\021\035\026\075\030" +
    "\030\031\031\032\027\033\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\121\001\001\000\004" +
    "\041\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\024\021\035\026\130\030\030\031" +
    "\031\032\027\033\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\057\036\142\001\001\000" +
    "\004\037\065\001\001\000\002\001\001\000\020\012\024" +
    "\021\035\026\145\030\030\031\031\032\027\033\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\154\007\156\010\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\020\014\161\027\162\001\001\000\016\011\164" +
    "\013\175\015\167\016\174\017\172\020\166\001\001\000" +
    "\010\002\020\014\163\027\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\176\013\175\015\167\016\174\017\172\020\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\215" +
    "\024\214\001\001\000\004\040\233\001\001\000\004\037" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\215\024\231\001\001\000\002\001" +
    "\001\000\016\011\223\013\175\015\167\016\174\017\172" +
    "\020\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\227\013\175\015\167\016\174" +
    "\017\172\020\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\247\001\001\000\004\041\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\256" +
    "\013\175\015\167\016\174\017\172\020\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\215\024\264\001" +
    "\001\000\004\037\220\001\001\000\002\001\001\000\016" +
    "\011\267\013\175\015\167\016\174\017\172\020\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\154\007\276\010\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	
	public void syntax_error(Symbol cur_token){

		report_error("\n Erreur de syntaxe! \n Ligne : "+ cur_token.left + "\n Colonne : " + cur_token.right+"\n\n" ,null);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
		report_fatal_error(" Analyse interrompue (erreur de syntaxe)\n ", null);

	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {


	Langage lang=new Langage();
	Fonction fonction=new Fonction();
	Programme prog=new Programme();
	int compteur=0;

  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparateurFOR ::= PGS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparateurFOR ::= PPS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparateurFOR ::= PGE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparateurFOR ::= PPE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparateur ::= EQ EQ 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comparateur ::= PGS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comparateur ::= PPS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comparateur ::= PGE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comparateur ::= PPE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operande ::= OR 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("operande",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operande ::= AND 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("operande",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= UNSIGNED 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.UNSIGNED); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.CHARACTER); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.BOOLEAN); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.FLOAT); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.INTEGER); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // testFOR ::= ID comparateurFOR NUMBER 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFOR",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // testFOR ::= ID comparateurFOR ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFOR",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // testIF ::= ID EQ EQ BOOLEEN 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // testIF ::= ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // testIF ::= NON ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // testIF ::= ID EQ EQ CHAINE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // testIF ::= ID comparateur NUMBER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // testIF ::= ID comparateur ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // liste_testIF ::= testIF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIF",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // liste_testIF ::= liste_testIF operande liste_testIF 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIF",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instructionWHILE ::= WHILE LPAR liste_testIF RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionWHILE",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instructionAFF ::= ID EQ FLOTTANT SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  prog.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instructionAFF ::= ID EQ CAR SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  prog.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instructionAFF ::= ID EQ BOOLEEN SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  prog.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instructionAFF ::= ID EQ NUMBER SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  prog.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instructionFOR ::= FOR LPAR ID EQ NUMBER SEMIC testFOR SEMIC ID PLUS PLUS RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionFOR",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-14)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instructionIF ::= IF LPAR liste_testIF RPAR LACC liste_instruction RACC ELSE LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIF",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instructionIF ::= IF LPAR liste_testIF RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIF",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instructionAppel ::= ID EQ ID LPAR ID RPAR SEMIC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		  
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAppel",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruction ::= instructionWHILE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruction ::= instructionAFF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruction ::= instructionFOR 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruction ::= instructionIF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruction ::= instructionAppel 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration ::= type ID SEMIC 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  RESULT = new Declaration(t,id); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // liste_instruction ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_instruction",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // liste_instruction ::= instruction liste_instruction 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_instruction",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // liste_declaration ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_declaration",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // liste_declaration ::= declaration liste_declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  prog.ajouterDeclaration(d); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_declaration",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // programme ::= MAIN LACC liste_declaration liste_instruction RACC 
            {
              Programme RESULT =null;
		 lang.setP(prog); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("programme",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // testFORfct ::= ID comparateurFOR NUMBER 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFORfct",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // testFORfct ::= ID comparateurFOR ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFORfct",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instructionWHILEfct ::= WHILE LPAR liste_testIFfct RPAR LACC listefonction_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionWHILEfct",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instructionAFFfct ::= ID EQ FLOTTANT SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  fonction.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFFfct",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instructionAFFfct ::= ID EQ CAR SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  fonction.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFFfct",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instructionAFFfct ::= ID EQ BOOLEEN SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  fonction.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFFfct",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instructionAFFfct ::= ID EQ NUMBER SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  fonction.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFFfct",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instructionAFFfct ::= ID EQ ID SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 fonction.affectation2(id,id2);  
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFFfct",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instructionFORfct ::= FOR LPAR ID EQ NUMBER SEMIC testFORfct SEMIC ID PLUS PLUS RPAR LACC listefonction_instruction RACC 
            {
              Object RESULT =null;
		 compteur++; System.out.println("compteur : " +compteur); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionFORfct",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-14)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // testIFfct ::= ID EQ EQ BOOLEEN 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIFfct",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // testIFfct ::= ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIFfct",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // testIFfct ::= NON ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIFfct",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // testIFfct ::= ID EQ EQ CHAINE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIFfct",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // testIFfct ::= ID comparateur NUMBER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIFfct",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // testIFfct ::= ID comparateur ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIFfct",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // liste_testIFfct ::= testIFfct 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIFfct",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // liste_testIFfct ::= liste_testIFfct operande liste_testIFfct 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIFfct",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instructionIFfct ::= IF LPAR liste_testIFfct RPAR LACC listefonction_instruction RACC ELSE LACC listefonction_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIFfct",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instructionIFfct ::= IF LPAR liste_testIFfct RPAR LACC listefonction_instruction RACC 
            {
              Object RESULT =null;
		 compteur--; System.out.println("compteurm : " +compteur); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIFfct",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instructionfct ::= instructionWHILEfct 
            {
              Object RESULT =null;
		 compteur++; System.out.println("compteurp : " +compteur); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionfct",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instructionfct ::= instructionAFFfct 
            {
              Object RESULT =null;
		 compteur++; System.out.println("compteurp : " +compteur); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionfct",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instructionfct ::= instructionFORfct 
            {
              Object RESULT =null;
		 compteur++; System.out.println("compteurp : " +compteur); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionfct",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instructionfct ::= instructionIFfct 
            {
              Object RESULT =null;
		 compteur++; System.out.println("compteurp : " +compteur); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionfct",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametre ::= 
            {
              Parametre RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("parametre",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametre ::= type ID 
            {
              Parametre RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Parametre(t,i); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("parametre",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listefonction_parametre ::= parametre 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Parametre par = (Parametre)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 fonction.ajouterParametre(par); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_parametre",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listefonction_parametre ::= parametre VIRGULE listefonction_parametre 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Parametre par = (Parametre)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		 fonction.ajouterParametre(par); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_parametre",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listefonction_declaration ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_declaration",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listefonction_declaration ::= declaration listefonction_declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  fonction.ajouterDeclaration(d); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_declaration",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listefonction_instruction ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listefonction_instruction ::= instructionfct listefonction_instruction 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fonction ::= type ID LPAR listefonction_parametre RPAR LACC listefonction_declaration listefonction_instruction RETURN ID SEMIC RACC 
            {
              Fonction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-11)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)).value;
		 
				
				fonction.setType(t);
				fonction.setNom(id);
		
				lang.ajouterFonction(fonction); 
				fonction.clearListe();
			
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("fonction",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-11)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // liste_fonction ::= 
            {
              LFonction RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_fonction",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // liste_fonction ::= fonction liste_fonction 
            {
              LFonction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Fonction f = (Fonction)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		LFonction lf = (LFonction)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_fonction",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // langage ::= error 
            {
              Langage RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("langage",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // langage ::= liste_fonction programme 
            {
              Langage RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		LFonction lf = (LFonction)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Programme p = (Programme)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT=lang; 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("langage",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= langage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Langage start_val = (Langage)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

