
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 07 23:36:55 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 07 23:36:55 CET 2013
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\005\013" +
    "\000\002\004\007\000\002\010\004\000\002\010\002\000" +
    "\002\012\004\000\002\012\002\000\002\013\005\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\013\007\000\002\006\005\000\002\006\003" +
    "\000\002\007\004\000\002\007\002\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\015\011\000\002\015\015\000\002\016\021\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\017\011\000\002\023\005\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\006\000\002\022\004\000\002\022" +
    "\003\000\002\022\006\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\004\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\021\005\000\002\021\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\020\003\012\026\ufffd\036\004\037\015\040" +
    "\005\041\010\043\014\001\002\000\004\044\uffcb\001\002" +
    "\000\004\044\uffc9\001\002\000\016\026\ufffd\036\004\037" +
    "\015\040\005\041\010\043\014\001\002\000\004\002\213" +
    "\001\002\000\004\044\uffc7\001\002\000\004\044\176\001" +
    "\002\000\004\002\uffff\001\002\000\004\026\017\001\002" +
    "\000\004\044\uffc8\001\002\000\004\044\uffca\001\002\000" +
    "\004\002\000\001\002\000\004\035\020\001\002\000\026" +
    "\030\ufff7\032\ufff7\033\ufff7\034\ufff7\036\030\037\025\040" +
    "\024\041\021\043\026\044\ufff7\001\002\000\004\044\uffc7" +
    "\001\002\000\014\030\062\032\056\033\055\034\ufff9\044" +
    "\063\001\002\000\004\044\052\001\002\000\004\044\uffc9" +
    "\001\002\000\004\044\uffca\001\002\000\004\044\uffc8\001" +
    "\002\000\026\030\ufff7\032\ufff7\033\ufff7\034\ufff7\036\030" +
    "\037\025\040\024\041\021\043\026\044\ufff7\001\002\000" +
    "\004\044\uffcb\001\002\000\004\012\032\001\002\000\004" +
    "\045\033\001\002\000\004\025\034\001\002\000\026\030" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\043\ufff5\044\ufff5\001\002\000\014\030\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\044\ufff8\001\002\000\004\012\037" +
    "\001\002\000\004\050\040\001\002\000\004\025\041\001" +
    "\002\000\026\030\ufff1\032\ufff1\033\ufff1\034\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\001\002\000" +
    "\004\012\043\001\002\000\004\046\044\001\002\000\004" +
    "\025\045\001\002\000\026\030\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4" +
    "\001\002\000\004\012\047\001\002\000\004\047\050\001" +
    "\002\000\004\025\051\001\002\000\026\030\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\043" +
    "\ufff2\044\ufff2\001\002\000\004\025\053\001\002\000\026" +
    "\030\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\043\ufff6\044\ufff6\001\002\000\014\030\062" +
    "\032\056\033\055\034\ufff9\044\063\001\002\000\004\016" +
    "\163\001\002\000\004\016\135\001\002\000\014\030\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\044\uffe9\001\002\000\014\030" +
    "\uffec\032\uffec\033\uffec\034\uffec\044\uffec\001\002\000\014" +
    "\030\uffeb\032\uffeb\033\uffeb\034\uffeb\044\uffeb\001\002\000" +
    "\004\016\100\001\002\000\004\012\067\001\002\000\004" +
    "\034\066\001\002\000\014\030\uffea\032\uffea\033\uffea\034" +
    "\uffea\044\uffea\001\002\000\004\002\ufffb\001\002\000\012" +
    "\045\070\047\071\050\073\051\072\001\002\000\004\025" +
    "\077\001\002\000\004\025\076\001\002\000\004\025\075" +
    "\001\002\000\004\025\074\001\002\000\014\030\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\044\uffe2\001\002\000\014\030\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\044\uffe5\001\002\000\014\030" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\044\uffe3\001\002\000\014" +
    "\030\uffe4\032\uffe4\033\uffe4\034\uffe4\044\uffe4\001\002\000" +
    "\006\014\104\044\102\001\002\000\010\004\uffdf\005\uffdf" +
    "\017\uffdf\001\002\000\022\004\uffd8\005\uffd8\006\123\007" +
    "\125\010\127\011\124\012\122\017\uffd8\001\002\000\010" +
    "\004\110\005\106\017\111\001\002\000\004\044\105\001" +
    "\002\000\010\004\uffd9\005\uffd9\017\uffd9\001\002\000\006" +
    "\014\uffde\044\uffde\001\002\000\006\014\104\044\102\001" +
    "\002\000\006\014\uffdd\044\uffdd\001\002\000\004\035\112" +
    "\001\002\000\014\030\062\032\056\033\055\034\ufff9\044" +
    "\063\001\002\000\004\034\114\001\002\000\016\030\uffe8" +
    "\031\115\032\uffe8\033\uffe8\034\uffe8\044\uffe8\001\002\000" +
    "\004\035\116\001\002\000\014\030\062\032\056\033\055" +
    "\034\ufff9\044\063\001\002\000\004\034\120\001\002\000" +
    "\014\030\uffe7\032\uffe7\033\uffe7\034\uffe7\044\uffe7\001\002" +
    "\000\010\004\110\005\106\017\uffe0\001\002\000\004\012" +
    "\132\001\002\000\006\044\uffd6\045\uffd6\001\002\000\006" +
    "\044\uffd3\045\uffd3\001\002\000\006\044\uffd5\045\uffd5\001" +
    "\002\000\006\044\130\045\131\001\002\000\006\044\uffd4" +
    "\045\uffd4\001\002\000\010\004\uffdc\005\uffdc\017\uffdc\001" +
    "\002\000\010\004\uffdb\005\uffdb\017\uffdb\001\002\000\012" +
    "\044\uffd2\045\uffd2\047\133\051\134\001\002\000\010\004" +
    "\uffd7\005\uffd7\017\uffd7\001\002\000\010\004\uffda\005\uffda" +
    "\017\uffda\001\002\000\004\044\136\001\002\000\004\012" +
    "\137\001\002\000\004\045\140\001\002\000\004\025\141" +
    "\001\002\000\004\044\142\001\002\000\012\006\155\007" +
    "\157\010\160\011\156\001\002\000\004\025\144\001\002" +
    "\000\004\044\145\001\002\000\004\020\146\001\002\000" +
    "\004\020\147\001\002\000\004\017\150\001\002\000\004" +
    "\035\151\001\002\000\014\030\062\032\056\033\055\034" +
    "\ufff9\044\063\001\002\000\004\034\153\001\002\000\014" +
    "\030\uffe6\032\uffe6\033\uffe6\034\uffe6\044\uffe6\001\002\000" +
    "\006\044\161\045\162\001\002\000\006\044\uffd1\045\uffd1" +
    "\001\002\000\006\044\uffce\045\uffce\001\002\000\006\044" +
    "\uffd0\045\uffd0\001\002\000\006\044\uffcf\045\uffcf\001\002" +
    "\000\004\025\uffcd\001\002\000\004\025\uffcc\001\002\000" +
    "\006\014\104\044\102\001\002\000\010\004\110\005\106" +
    "\017\165\001\002\000\004\035\166\001\002\000\014\030" +
    "\062\032\056\033\055\034\ufff9\044\063\001\002\000\004" +
    "\034\170\001\002\000\014\030\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\044\uffe1\001\002\000\004\034\ufffa\001\002\000\004" +
    "\012\173\001\002\000\004\045\174\001\002\000\004\025" +
    "\175\001\002\000\026\030\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3\044\ufff3\001" +
    "\002\000\004\016\177\001\002\000\020\017\uffed\027\uffed" +
    "\036\004\037\015\040\005\041\010\043\014\001\002\000" +
    "\004\017\206\001\002\000\004\044\205\001\002\000\006" +
    "\017\uffef\027\203\001\002\000\020\017\uffed\027\uffed\036" +
    "\004\037\015\040\005\041\010\043\014\001\002\000\004" +
    "\017\ufff0\001\002\000\006\017\uffee\027\uffee\001\002\000" +
    "\004\035\207\001\002\000\026\030\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\036\030\037\025\040\024\041\021\043\026\044" +
    "\ufff7\001\002\000\014\030\062\032\056\033\055\034\ufff9" +
    "\044\063\001\002\000\004\034\212\001\002\000\016\026" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\043\ufffc\001\002" +
    "\000\004\002\001\001\002\000\004\026\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\012\002\006\003\012\005\005\014\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\213" +
    "\005\005\014\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\021\013\026\014\022" +
    "\001\001\000\002\001\001\000\016\010\063\011\053\015" +
    "\057\016\060\017\056\020\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\034\013\026\014\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\170\011\053\015\057\016\060\017\056\020\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\100\023\102\001\001\000\002\001\001\000\004" +
    "\025\125\001\001\000\004\024\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\100" +
    "\023\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\112\011\053\015\057\016\060\017\056\020\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\116\011\053\015\057\016\060\017\056" +
    "\020\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\142\001\001\000\004\026\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\151\011\053\015\057\016\060\017\056\020\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\100\023\163\001\001\000\004\024\106\001\001\000\002" +
    "\001\001\000\016\010\166\011\053\015\057\016\060\017" +
    "\056\020\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\177\007\201\014\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\203\007\201" +
    "\014\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\207\013\026\014\022\001\001" +
    "\000\016\010\210\011\053\015\057\016\060\017\056\020" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	
	public void syntax_error(Symbol cur_token){

		report_error("\n Erreur de syntaxe! \n Ligne : "+ cur_token.left + "\n Colonne : " + cur_token.right+"\n\n" ,null);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
		report_fatal_error(" Analyse interrompue (erreur de syntaxe)\n ", null);

	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {


	Langage lang;

  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= UNSIGNED 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.UNSIGNED); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.CHARACTER); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.BOOLEAN); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.FLOAT); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.INTEGER); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // testFOR ::= ID comparateurFOR NUMBER 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFOR",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // testFOR ::= ID comparateurFOR ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFOR",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comparateurFOR ::= PGS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comparateurFOR ::= PPS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparateurFOR ::= PGE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparateurFOR ::= PPE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparateur ::= EQ EQ 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparateur ::= PGS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparateur ::= PPS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparateur ::= PGE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparateur ::= PPE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // testIF ::= ID EQ EQ BOOLEEN 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // testIF ::= ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // testIF ::= NON ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // testIF ::= ID EQ EQ CHAINE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // testIF ::= ID comparateur NUMBER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // testIF ::= ID comparateur ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operande ::= OR 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("operande",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operande ::= AND 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("operande",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // liste_testIF ::= testIF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIF",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // liste_testIF ::= liste_testIF operande liste_testIF 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIF",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instructionWHILE ::= WHILE LPAR liste_testIF RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionWHILE",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instructionAFF ::= ID EQ CAR SEMIC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instructionAFF ::= ID EQ BOOLEEN SEMIC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instructionAFF ::= ID EQ NUMBER SEMIC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instructionAFF ::= ID EQ CHAINE SEMIC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instructionFOR ::= FOR LPAR ID EQ NUMBER SEMIC testFOR SEMIC ID PLUS PLUS RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionFOR",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-14)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instructionIF ::= IF LPAR liste_testIF RPAR LACC liste_instruction RACC ELSE LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIF",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instructionIF ::= IF LPAR liste_testIF RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIF",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= instructionWHILE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= instructionAFF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= instructionFOR 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= instructionIF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametre ::= 
            {
              Parametre RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("parametre",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametre ::= type ID 
            {
              Parametre RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Parametre(t,i); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("parametre",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // liste_parametre ::= parametre 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Parametre par = (Parametre)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 int size= lang.getLf().getListFontion().size(); 
							lang.getLf().getListFontion().get(size-1).getListeParametre().add(par);
						
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_parametre",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // liste_parametre ::= parametre VIRGULE liste_parametre 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Parametre par = (Parametre)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		 int size= lang.getLf().getListFontion().size(); 
							lang.getLf().getListFontion().get(size-1).getListeParametre().add(par);
						
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_parametre",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= CHAR ID EQ CAR SEMIC 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Char v = (Char)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 RESULT = new Declaration(EnumType.CHARACTER,i,v); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= BOOL ID EQ BOOLEEN SEMIC 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 RESULT = new Declaration(EnumType.BOOLEAN,i,v); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= UNSIGNED ID EQ NUMBER SEMIC 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 RESULT = new Declaration(EnumType.UNSIGNED,i,v); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= FLOAT ID EQ FLOTTANT SEMIC 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 RESULT = new Declaration(EnumType.FLOAT,i,v); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= INT ID EQ NUMBER SEMIC 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 RESULT = new Declaration(EnumType.INTEGER,i,v); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= type ID SEMIC 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 RESULT = new Declaration(t,i); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // liste_declaration ::= 
            {
              LDeclaration RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_declaration",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // liste_declaration ::= declaration liste_declaration 
            {
              LDeclaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 int size= lang.getLf().getListFontion().size(); 
							lang.getLf().getListFontion().get(size-1).getListeDeclaration().add(d); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_declaration",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // liste_instruction ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_instruction",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // liste_instruction ::= instruction liste_instruction 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_instruction",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programme ::= MAIN LACC liste_declaration liste_instruction RACC 
            {
              Programme RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("programme",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fonction ::= type ID LPAR liste_parametre RPAR LACC liste_declaration liste_instruction RACC 
            {
              Fonction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).value;
		 RESULT=new Fonction(t); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("fonction",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // liste_fonction ::= 
            {
              LFonction RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_fonction",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // liste_fonction ::= fonction liste_fonction 
            {
              LFonction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Fonction f = (Fonction)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		LFonction lf = (LFonction)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 lang.ajouterFonction(); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_fonction",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // langage ::= error 
            {
              Langage RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("langage",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // langage ::= liste_fonction programme 
            {
              Langage RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		LFonction lf = (LFonction)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Programme p = (Programme)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 lang = new Langage(lf, p); RESULT=lang; 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("langage",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= langage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Langage start_val = (Langage)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

