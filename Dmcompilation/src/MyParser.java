
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 08 16:54:46 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 08 16:54:46 CET 2013
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\013" +
    "\000\002\011\004\000\002\011\002\000\002\013\004\000" +
    "\002\013\002\000\002\007\005\000\002\007\003\000\002" +
    "\005\007\000\002\016\005\000\002\010\004\000\002\010" +
    "\002\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\017\011\000\002\017\015\000" +
    "\002\020\021\000\002\022\006\000\002\022\006\000\002" +
    "\022\006\000\002\022\006\000\002\021\011\000\002\025" +
    "\005\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\006\000" +
    "\002\024\004\000\002\024\003\000\002\024\006\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\004\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\023\005\000" +
    "\002\023\005\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\020\003\012\026\ufffd\036\004\037\014\040" +
    "\005\041\010\043\015\001\002\000\004\044\uffd0\001\002" +
    "\000\004\044\uffce\001\002\000\016\026\ufffd\036\004\037" +
    "\014\040\005\041\010\043\015\001\002\000\004\002\162" +
    "\001\002\000\004\044\uffcc\001\002\000\004\044\024\001" +
    "\002\000\004\002\uffff\001\002\000\004\026\017\001\002" +
    "\000\004\044\uffcf\001\002\000\004\044\uffcd\001\002\000" +
    "\004\002\000\001\002\000\004\035\020\001\002\000\002" +
    "\001\002\000\002\001\002\000\004\034\023\001\002\000" +
    "\004\002\ufff5\001\002\000\004\016\025\001\002\000\020" +
    "\017\ufff2\027\ufff2\036\004\037\014\040\005\041\010\043" +
    "\015\001\002\000\006\017\ufff6\027\160\001\002\000\004" +
    "\044\157\001\002\000\004\017\031\001\002\000\004\035" +
    "\032\001\002\000\026\030\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\036\004\037\014\040\005\041\010\043\015\044\ufff8\001" +
    "\002\000\014\030\050\032\044\033\043\034\ufffa\044\051" +
    "\001\002\000\004\044\037\001\002\000\026\030\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\036\004\037\014\040\005\041\010" +
    "\043\015\044\ufff8\001\002\000\014\030\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\044\ufff9\001\002\000\004\025\040\001\002" +
    "\000\026\030\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4\001\002\000\004" +
    "\034\156\001\002\000\014\030\050\032\044\033\043\034" +
    "\ufffa\044\051\001\002\000\004\016\147\001\002\000\004" +
    "\016\121\001\002\000\014\030\uffee\032\uffee\033\uffee\034" +
    "\uffee\044\uffee\001\002\000\014\030\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\044\ufff1\001\002\000\014\030\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\044\ufff0\001\002\000\004\016\064\001\002" +
    "\000\004\012\053\001\002\000\014\030\uffef\032\uffef\033" +
    "\uffef\034\uffef\044\uffef\001\002\000\012\045\054\046\056" +
    "\047\055\050\057\001\002\000\004\025\063\001\002\000" +
    "\004\025\062\001\002\000\004\025\061\001\002\000\004" +
    "\025\060\001\002\000\014\030\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\044\uffe8\001\002\000\014\030\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\044\uffe7\001\002\000\014\030\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\044\uffe9\001\002\000\014\030\uffea\032\uffea" +
    "\033\uffea\034\uffea\044\uffea\001\002\000\006\014\070\044" +
    "\066\001\002\000\010\004\uffe4\005\uffe4\017\uffe4\001\002" +
    "\000\022\004\uffdd\005\uffdd\006\106\007\111\010\113\011" +
    "\110\012\107\017\uffdd\001\002\000\010\004\074\005\072" +
    "\017\075\001\002\000\004\044\071\001\002\000\010\004" +
    "\uffde\005\uffde\017\uffde\001\002\000\006\014\uffe3\044\uffe3" +
    "\001\002\000\006\014\070\044\066\001\002\000\006\014" +
    "\uffe2\044\uffe2\001\002\000\004\035\076\001\002\000\002" +
    "\001\002\000\004\034\100\001\002\000\016\030\uffed\031" +
    "\101\032\uffed\033\uffed\034\uffed\044\uffed\001\002\000\004" +
    "\035\102\001\002\000\002\001\002\000\004\034\104\001" +
    "\002\000\014\030\uffec\032\uffec\033\uffec\034\uffec\044\uffec" +
    "\001\002\000\010\004\074\005\072\017\uffe5\001\002\000" +
    "\006\044\uffdb\045\uffdb\001\002\000\004\012\116\001\002" +
    "\000\006\044\uffd8\045\uffd8\001\002\000\006\044\uffda\045" +
    "\uffda\001\002\000\006\044\114\045\115\001\002\000\006" +
    "\044\uffd9\045\uffd9\001\002\000\010\004\uffe1\005\uffe1\017" +
    "\uffe1\001\002\000\010\004\uffe0\005\uffe0\017\uffe0\001\002" +
    "\000\012\044\uffd7\045\uffd7\047\117\051\120\001\002\000" +
    "\010\004\uffdc\005\uffdc\017\uffdc\001\002\000\010\004\uffdf" +
    "\005\uffdf\017\uffdf\001\002\000\004\044\122\001\002\000" +
    "\004\012\123\001\002\000\004\045\124\001\002\000\004" +
    "\025\125\001\002\000\004\044\126\001\002\000\012\006" +
    "\141\007\143\010\144\011\142\001\002\000\004\025\130" +
    "\001\002\000\004\044\131\001\002\000\004\020\132\001" +
    "\002\000\004\020\133\001\002\000\004\017\134\001\002" +
    "\000\004\035\135\001\002\000\002\001\002\000\004\034" +
    "\137\001\002\000\014\030\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\044\uffeb\001\002\000\006\044\145\045\146\001\002\000" +
    "\006\044\uffd6\045\uffd6\001\002\000\006\044\uffd3\045\uffd3" +
    "\001\002\000\006\044\uffd5\045\uffd5\001\002\000\006\044" +
    "\uffd4\045\uffd4\001\002\000\004\025\uffd2\001\002\000\004" +
    "\025\uffd1\001\002\000\006\014\070\044\066\001\002\000" +
    "\010\004\074\005\072\017\151\001\002\000\004\035\152" +
    "\001\002\000\002\001\002\000\004\034\154\001\002\000" +
    "\014\030\uffe6\032\uffe6\033\uffe6\034\uffe6\044\uffe6\001\002" +
    "\000\004\034\ufffb\001\002\000\016\026\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\043\ufffc\001\002\000\006\017\ufff3" +
    "\027\ufff3\001\002\000\020\017\ufff2\027\ufff2\036\004\037" +
    "\014\040\005\041\010\043\015\001\002\000\004\017\ufff7" +
    "\001\002\000\004\002\001\001\002\000\004\026\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\012\002\010\003\006\004\012\006\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\010" +
    "\004\162\006\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\020\001\001\000\004" +
    "\015\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\026\007\027\010\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\033\013\032\016\034\001\001" +
    "\000\016\011\040\012\041\017\045\020\046\021\044\022" +
    "\051\001\001\000\002\001\001\000\010\002\033\013\035" +
    "\016\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\154\012\041" +
    "\017\045\020\046\021\044\022\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\064\025\066\001\001\000\002\001\001\000" +
    "\004\027\111\001\001\000\004\026\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\064\025\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\126\001\001" +
    "\000\004\030\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\064\025\147" +
    "\001\001\000\004\026\072\001\001\000\002\001\001\000" +
    "\004\015\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\026\007\160\010\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	
	public void syntax_error(Symbol cur_token){

		report_error("\n Erreur de syntaxe! \n Ligne : "+ cur_token.left + "\n Colonne : " + cur_token.right+"\n\n" ,null);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
		report_fatal_error(" Analyse interrompue (erreur de syntaxe)\n ", null);

	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {


	Langage lang=new Langage();
	Fonction fonction=new Fonction();
	Programme prog=new Programme();

  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= UNSIGNED 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.UNSIGNED); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.CHARACTER); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.BOOLEAN); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.FLOAT); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT=new Type(EnumType.INTEGER); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // testFOR ::= ID comparateurFOR NUMBER 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFOR",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // testFOR ::= ID comparateurFOR ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testFOR",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparateurFOR ::= PGS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparateurFOR ::= PPS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparateurFOR ::= PGE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparateurFOR ::= PPE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateurFOR",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparateur ::= EQ EQ 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparateur ::= PGS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparateur ::= PPS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparateur ::= PGE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparateur ::= PPE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("comparateur",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // testIF ::= ID EQ EQ BOOLEEN 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // testIF ::= ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // testIF ::= NON ID 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // testIF ::= ID EQ EQ CHAINE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // testIF ::= ID comparateur NUMBER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // testIF ::= ID comparateur ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("testIF",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operande ::= OR 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("operande",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operande ::= AND 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("operande",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // liste_testIF ::= testIF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIF",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // liste_testIF ::= liste_testIF operande liste_testIF 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_testIF",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instructionWHILE ::= WHILE LPAR liste_testIF RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionWHILE",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instructionAFF ::= ID EQ FLOTTANT SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 System.out.println("hey"); fonction.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instructionAFF ::= ID EQ CAR SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 System.out.println("hey"); fonction.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instructionAFF ::= ID EQ BOOLEEN SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 System.out.println("hey"); fonction.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instructionAFF ::= ID EQ NUMBER SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 System.out.println("hey"); fonction.affectation(id,String.valueOf(v)); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionAFF",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instructionFOR ::= FOR LPAR ID EQ NUMBER SEMIC testFOR SEMIC ID PLUS PLUS RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionFOR",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-14)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instructionIF ::= IF LPAR liste_testIF RPAR LACC liste_instruction RACC ELSE LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIF",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instructionIF ::= IF LPAR liste_testIF RPAR LACC liste_instruction RACC 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instructionIF",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= instructionWHILE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= instructionAFF 
            {
              Object RESULT =null;
		 System.out.println("hey"); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= instructionFOR 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= instructionIF 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("instruction",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametre ::= 
            {
              Parametre RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("parametre",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametre ::= type ID 
            {
              Parametre RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Parametre(t,i); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("parametre",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= type ID SEMIC 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  RESULT = new Declaration(t,id); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaration",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // programme ::= MAIN LACC liste_declaration liste_instruction RACC 
            {
              Programme RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("programme",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listefonction_parametre ::= parametre 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Parametre par = (Parametre)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 fonction.ajouterParametre(par); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_parametre",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listefonction_parametre ::= parametre VIRGULE listefonction_parametre 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Parametre par = (Parametre)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		 fonction.ajouterParametre(par); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_parametre",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listefonction_declaration ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listefonction_declaration ::= declaration listefonction_declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		  fonction.ajouterDeclaration(d); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_declaration",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listefonction_instruction ::= 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listefonction_instruction ::= instruction listefonction_instruction 
            {
              Object RESULT =null;
		 System.out.println("hey"); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("listefonction_instruction",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fonction ::= type ID LPAR listefonction_parametre RPAR LACC listefonction_declaration listefonction_instruction RACC 
            {
              Fonction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).value;
		 RESULT=fonction; 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("fonction",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // liste_fonction ::= 
            {
              LFonction RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_fonction",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // liste_fonction ::= fonction liste_fonction 
            {
              LFonction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Fonction f = (Fonction)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		LFonction lf = (LFonction)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 lang.ajouterFonction(f); fonction.clearListe(); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("liste_fonction",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // langage ::= error 
            {
              Langage RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("langage",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // langage ::= liste_fonction programme 
            {
              Langage RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		LFonction lf = (LFonction)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Programme p = (Programme)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT=lang; 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("langage",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= langage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Langage start_val = (Langage)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

